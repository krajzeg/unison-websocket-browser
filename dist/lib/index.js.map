{"version":3,"sources":["index.js"],"names":[],"mappings":"ysBAAA,IAAI,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;;AAE1B,IAAM,eAAe,GAAG;AACtB,OAAK,EAAE,KAAK,EACb,CAAC;;;AAEI,qBAAqB;AACd,WADP,qBAAqB,CACb,YAAY,EAAgB,KAAd,OAAO,yDAAG,EAAE,sCADlC,qBAAqB;AAEvB,QAAI,CAAC,SAAS;AACZ,UAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;;AAE/D,QAAI,CAAC,OAAO,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;AACpD,QAAI,CAAC,GAAG,GAAG,YAAY,CAAC;;AAExB,QAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;;AAE5B,QAAI,CAAC,OAAO,EAAE,CAAC,CAChB,aAXG,qBAAqB;;;AAalB,uBAAG;AACR,UAAI,CAAC,EAAE,GAAG,IAAI,SAAS,CAAC,YAAY,CAAC,CAAC;AACtC,QAAE,CAAC,MAAM,GAAG,YAAM;AAChB,cAAK,EAAE,GAAG,EAAE,CAAC,CACd,CAAC;;AACF,QAAE,CAAC,OAAO,GAAG,YAAM;AACjB,eAAO,CAAC,GAAG,8BAA4B,MAAK,GAAG,cAAW,CAAC,CAC5D,CAAC;;AACF,QAAE,CAAC,SAAS,GAAG,UAAC,GAAG,EAAK,CAAE,MAAK,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA,CAAE,CAAC,CACpD;;;AAEG,kBAAC,SAAS,EAAE;AACd,QAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CACpB;;;AAEM,qBAAC,SAAS,EAAE;AACjB,UAAI,IAAI,CAAC,gBAAgB,EAAE;AACzB,YAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAClC;AAAM;;AAEL,YAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CACxC,CACF;;;;AAEQ,uBAAC,QAAQ,EAAE;AAClB,UAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;;;AAGjC,UAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,UAAC,GAAG,EAAK;AACtC,eAAK,OAAO,CAAC,GAAG,CAAC,CAAC,CACnB,CAAC,CAAC,CACJ,YA5CG,qBAAqB","file":"index.js","sourcesContent":["var _ = require('lodash');\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  debug: false\r\n};\r\n\r\nclass UnisonWebsocketClient {\r\n  constructor(websocketUrl, options = {}) {\r\n    if (!WebSocket)\r\n      throw new Error(\"Your browser does not support websockets.\");\r\n\r\n    this.options = _.defaults(options, DEFAULT_OPTIONS);\r\n    this.url = websocketUrl;\r\n\r\n    this._bufferedMessages = [];\r\n\r\n    this.connect();\r\n  }\r\n\r\n  connect() {\r\n    this.ws = new WebSocket(websocketUrl);\r\n    ws.onopen = () => {\r\n      this.ws = ws;\r\n    };\r\n    ws.onclose = () => {\r\n      console.log(`Websocket connection to ${this.url} closed.`);\r\n    };\r\n    ws.onmsesage = (evt) => { this.receive(evt.data) };\r\n  }\r\n\r\n  send(msgString) {\r\n    ws.send(msgString);\r\n  }\r\n\r\n  receive(msgString) {\r\n    if (this._receiveCallback) {\r\n      this._receiveCallback(msgString);\r\n    } else {\r\n      // if the callback is not registered yet, we buffer messages for later\r\n      this._bufferedMessages.push(msgString);\r\n    }\r\n  }\r\n\r\n  onReceive(callback) {\r\n    this._receiveCallback = callback;\r\n\r\n    // deliver all buffered messages now that there is somebody listening\r\n    this._bufferedMessages.forEach((msg) => {\r\n      this.receive(msg);\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\lib"}